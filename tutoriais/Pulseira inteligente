# T√≠tulo do Tutorial

**Descri√ß√£o:** Breve introdu√ß√£o ao tutorial, explicando o objetivo do projeto, as habilidades que ser√£o adquiridas e o p√∫blico-alvo. Ex.: "Neste tutorial, vamos desenvolver um sistema de monitoramento de sinais vitais usando uma ESP32 com sensores de temperatura e frequ√™ncia card√≠aca."

Implementa√ß√£o de um tutorial para a cria√ß√£o de uma Pulseira Inteligente para Idosos ou Pacientes Cr√¥nicos, utilizando ESP32, MAX30100 e M√≥dulo GPS, com integra√ß√£o ao Firebase para monitoramento remoto de sinais vitais e localiza√ß√£o.

## √çndice

1. [Introdu√ß√£o](#introdu√ß√£o)
2. [Requisitos](#requisitos)
3. [Configura√ß√£o do Ambiente](#configura√ß√£o-do-ambiente)
4. [Montagem do Circuito](#montagem-do-circuito)
5. [Programa√ß√£o](#programa√ß√£o)
6. [Teste e Valida√ß√£o](#teste-e-valida√ß√£o)
7. [Expans√µes e Melhorias](#expans√µes-e-melhorias)
8. [Refer√™ncias](#refer√™ncias)

---

## Introdu√ß√£o

Este projeto tem como objetivo fornecer uma solu√ß√£o acess√≠vel e eficiente para o monitoramento cont√≠nuo de idosos e pacientes cr√¥nicos, integrando tecnologias IoT para garantir maior seguran√ßa e qualidade de vida. Com o envelhecimento populacional e o aumento de doen√ßas cr√¥nicas, sistemas de monitoramento remoto tornam-se essenciais para:
Detec√ß√£o precoce de altera√ß√µes nos sinais vitais;
Localiza√ß√£o imediata em casos de emerg√™ncia;
Redu√ß√£o do tempo de resposta em situa√ß√µes cr√≠ticas;
Acompanhamento cont√≠nuo por cuidadores e familiares.
---

## Requisitos
### Hardware
- **Placa**: Microcontrolador ESP32 - receber e enviar dados via wifi;
- **Sensores**: Sensor MAX30100 - frequ√™ncia de batimentos card√≠acos e satura√ß√£o de oxig√™nio; GPS NEO-6M - para determinar a localiza√ß√£o do paciente.
- **Outros componentes**: Resistor (220Œ©-330Œ©), Led e Buzzer - indicar status de emerg√™ncia.

### Software

- **Linguagens**: C/C++ para ESP32
- **IDE**: Arduino IDE
- **Bibliotecas**: WiFi, FirebaseESP32, Wire.h, MAX30100_PulseOximeter, TinyGPS++, HardwareSerial.
- **Banco de Dados**: Firebase.

---

## Configura√ß√£o do Ambiente

### Passo 1: Instala√ß√£o do Software

- Arduino IDE: Baixe e instale o Arduino IDE a partir do site https://www.arduino.cc/en/software.
- Adicionar o ESP32 dev no Gerenciador de Placas do Arduino IDE.
- Instalar as bibliotecas necess√°rias.
- Criar um banco de dados no Firebase para armazenar os registros:  
Acesse o Firebase Console e crie um novo projeto. 
V√° em Build > Realtime Database e clique em Criar Banco de Dados.  
Escolha um local (exemplo: us-central1) e selecione modo de teste para evitar problemas de permiss√£o.  
V√° em Configura√ß√µes do Projeto > Contas de Servi√ßo e copie a Chave da API.  
- Configurar APIs para envio de dados via HTTP. 

### Passo 2: Configura√ß√£o das Placas

Conecte o Arduino ao computador via USB.
No Arduino IDE, v√° em Ferramentas > Placa e selecione Arduino Uno.
Em Ferramentas > Porta, escolha a porta correspondente ao Arduino conectado.

---

## Montagem do Circuito

Conecte o sensor MAX30100, o buzzer e o led conforme o esquema a seguir:

VCC do MAX30100 ao pino 3.3V	no ESP32;
GND	do MAX30100 ao GND do ESP32;
SDA	do MAX30100 ao pino 21 do ESP32;
SCL	do MAX30100 ao pino 22 do ESP32;
LED (+) ao pino 12	do ESP32;
LED (-) ao GND do ESP32	Via resistor (220Œ©-330Œ©).
Buzzer (+) ao pino 35	do ESP32;
Buzzer (-) ao GND do ESP32;
Bot√£o conectado ao pino 18 do ESP32;
VCC do GPS NEO-6M no VIN (5V) do ESP32;
GND do GPS NEO-6M ao GND do ESP32;
TX do GPS NEO-6M ao RX0 do ESP32;
RX do GPS NEO-6M ao TX0 do ESP32.

![Simula√ß√£o da pulseira inteligente de monitoramento](https://wokwi.com/projects/426602736970433537)

---

## Programa√ß√£o

### Passo 1: Configura√ß√£o dos Sensores e Atuadores

C√≥digo em C para Arduino:

#include <WiFi.h>
#include <FirebaseESP32.h>
#include <Wire.h>
#include "MAX30100_PulseOximeter.h"
#include <TinyGPS++.h>
#include <HardwareSerial.h>

// Configura√ß√£o do Firebase
#define FIREBASE_HOST "SEU_FIREBASE.firebaseio.com"
#define FIREBASE_AUTH "SUA_CHAVE_DO_FIREBASE"
FirebaseData firebaseData;

// Configura√ß√£o do Wi-Fi
const char* ssid = "SEU_WIFI";
const char* password = "SUA_SENHA";

// Configura√ß√£o do MAX30100
PulseOximeter pox;
#define REPORTING_PERIOD_MS 1000
uint32_t tsLastReport = 0;

// Configura√ß√£o do GPS
static const int RXPin = 16, TXPin = 17;
static const uint32_t GPSBaud = 9600;
TinyGPSPlus gps;
HardwareSerial ss(1);

// Configura√ß√£o do Bot√£o de Emerg√™ncia, LED e Buzzer
#define BOTAO 4
#define LED 2
#define BUZZER 5

void onBeatDetected() {
    Serial.println("Batimento detectado!");
}

void setup() {
    Serial.begin(115200);
    
    // Conex√£o Wi-Fi
    WiFi.begin(ssid, password);
    Serial.print("Conectando ao Wi-Fi");
    while (WiFi.status() != WL_CONNECTED) {
        Serial.print(".");
        delay(1000);
    }
    Serial.println("\nConectado ao Wi-Fi!");
    
    // Conectar ao Firebase
    Firebase.begin(FIREBASE_HOST, FIREBASE_AUTH);
    Firebase.reconnectWiFi(true);
    
    // Inicializar o MAX30100
    if (!pox.begin()) {
        Serial.println("Falha ao inicializar o MAX30100!");
        while (1);
    }
    pox.setOnBeatDetectedCallback(onBeatDetected);
    
    // Inicializar o GPS
    ss.begin(GPSBaud, SERIAL_8N1, RXPin, TXPin);
    
    // Configura√ß√£o do Bot√£o, LED e Buzzer
    pinMode(BOTAO, INPUT_PULLUP);
    pinMode(LED, OUTPUT);
    pinMode(BUZZER, OUTPUT);
}

void loop() {
    // Atualizar leitura do MAX30100
    pox.update();
    
    if (millis() - tsLastReport > REPORTING_PERIOD_MS) {
        tsLastReport = millis();
        float bpm = pox.getHeartRate();
        float spo2 = pox.getSpO2();
        
        Serial.print("BPM: "); Serial.print(bpm);
        Serial.print(" | SpO2: "); Serial.println(spo2);
        
        Firebase.setFloat(firebaseData, "/pulseira/bpm", bpm);
        Firebase.setFloat(firebaseData, "/pulseira/spo2", spo2);
    }
    
    // Capturar localiza√ß√£o GPS
    while (ss.available() > 0) {
        gps.encode(ss.read());
        if (gps.location.isUpdated()) {
            float latitude = gps.location.lat();
            float longitude = gps.location.lng();
            
            Serial.print("Latitude: "); Serial.print(latitude);
            Serial.print(" | Longitude: "); Serial.println(longitude);
            
            Firebase.setFloat(firebaseData, "/pulseira/latitude", latitude);
            Firebase.setFloat(firebaseData, "/pulseira/longitude", longitude);
        }
    }
    
    // Verificar se o bot√£o de emerg√™ncia foi pressionado
    if (digitalRead(BOTAO) == LOW) {
        Serial.println("üö® Bot√£o de emerg√™ncia pressionado!");
        Firebase.setBool(firebaseData, "/pulseira/emergencia", true);
        digitalWrite(LED, HIGH);
        digitalWrite(BUZZER, HIGH);
        delay(2000);
        digitalWrite(LED, LOW);
        digitalWrite(BUZZER, LOW);
    }
}

```
---

## Teste e Valida√ß√£o

Descreva os testes para validar cada parte do projeto:

1. **Testando Sensores**: Verifique se as leituras s√£o consistentes e corretas.
2. **Monitoramento em Tempo Real**: Teste o sistema completo em condi√ß√µes simuladas para garantir que funciona conforme o esperado.

---

## Expans√µes e Melhorias

Sugest√µes para melhorar o projeto, como:

- Sensor de Queda (Aceler√¥metro/MPU6050) - Detectar quedas e enviar alertas autom√°ticos aos cuidadores.
- Limiar de Emerg√™ncia Autom√°tico - Alertar cuidadores se: Batimento card√≠aco < 50 ou > 120 BPM, SpO‚ÇÇ < 90% e queda detectada (via aceler√¥metro).
- Anti-Acionamento Acidental - Exigir press√£o longa (3 segundos) no bot√£o de emerg√™ncia ou usar dupla confirma√ß√£o (LED piscando).

---

## Refer√™ncias

- Link para simula√ß√£o: https://wokwi.com/projects/426602736970433537
- Documenta√ß√£o do Arduino: https://www.arduino.cc/.
